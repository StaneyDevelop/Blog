Подключаем PostsAdapter к RecyclerView в MainFragment
Создадим в классе MainFragment поле private PostsAdapter adapter и метод private void init без входных параметров. Добавим вызов этого метода сразу после вызова метода initViews внутри метода onCreateView. Теперь внутри метода init можно работать с виджетами и быть уверенными в том что они точно проинициализированы.
Реализуем PostsAdapter внутри MainFragment и подключим его к list_posts
Внутри метода init инициализируем PostsAdapter и входящим параметром в конструктор PostsAdapter передаём контекст используя метод getActivity. Далее нужно добавить настройку к нашему list_posts. В RecyclerView есть сущность которая руководит тем каким образом элементы будут идти друг за другом. Нам необходима самая простая реализация выводящая элементы по порядку в один столбец. Для этого мы воспользуемся классом LinearLayoutManager. Создадим экземпляр этого класса. В конструктор LinearLayoutManager необходимо подать контекст и мы его можем получить используя метод getActivity. И укажем нашему list_posts это менеджер с помощью метода setLayoutManager.
Пришло время установить PostsAdapter adapterк RecyclerView list_posts. Это можно сделать вызвав метод setAdapter у list_posts
Теперь адаптер и RecyclerView работают вместе. Но RecyclerView никаких данных пока не отображает. Для того чтобы создать эти данные мы следующей строкой после list_posts.setAdapter(adapter) создадим объект класса List и проинициализируем его. Добавим в него несколько элементов и укажем адаптеру, что мы хотим использовать эти данные. Это можно сделать с помощью метода swapData, который мы специально для этого сделали в классе PostsAdapter
MainFragment использует функционал адаптера PostsAdapter для формирования представления элементов списка в своём представлении
Теперь у нас есть список, RecyclerView list_posts, который выводит данные из List data таким образом, который мы реализовали в классе PostsAdapter
Пример запущенного приложения на устройстве Nexus5 Android 6.0.1