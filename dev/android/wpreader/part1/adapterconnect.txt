Подключаем PostsAdapter к RecyclerView в MainFragment
Создадим в классе MainFragment поле private PostsAdapter adapter и метод private void init. Добавим вызов этого метода сразу после вызова метода initViews внутри метода onCreateView. Теперь внутри метода init можно работать с виджетами и быть уверенными в том что они проинициализированы.
MainFragment в своей логике использует функционал PostsAdapter
Объявим PostsAdapter adapter в MainFragment и подключим его к list_posts. Внутри метода init инициализируем PostsAdapter. В конструктор передаём контекст, используя метод getActivity. Далее нужно добавить настройку к нашему list_posts. В RecyclerView есть сущность которая руководит тем каким образом элементы будут идти друг за другом. Нам необходима самая простая реализация, выводящая элементы по порядку в один столбец. Для этого воспользуемся классом LinearLayoutManager. Создадим экземпляр этого класса. В конструктор LinearLayoutManager необходимо подать контекст. Укажем нашему list_posts этот менеджер через метод setLayoutManager. Установим adapter к list_posts через метод setAdapter. Теперь adapter и list_posts работают вместе, но list_posts  никаких данных пока не отображает. Поэтому, следующей строкой после list_posts.setAdapter(adapter), создадим объект класса List&lt;String&gt; data и проинициализируем его. Добавим в него несколько элементов и укажем адаптеру, что мы хотим использовать эти данные через метод swapData у adapter.
MainFragment использует функционал PostsAdapter для формирования представления элементов списка в своём представлении
Теперь у нас есть список RecyclerView list_posts, который выводит данные из List&lt;String&gt; data таким образом, который мы описали в PostsAdapter.
Пример запущенного приложения на устройстве Nexus5 Android 6.0.1. Внешний вид должен отличаться, так как зависит от настроек, которые будут описаны в следующих статьях.